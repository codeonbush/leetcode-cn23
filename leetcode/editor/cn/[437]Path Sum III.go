package leetcode

import (
	"testing"
)

/**
Given the root of a binary tree and an integer targetSum, return the number of
paths where the sum of the values along the path equals targetSum.

 The path does not need to start or end at the root or a leaf, but it must go
downwards (i.e., traveling only from parent nodes to child nodes).


 Example 1:


Input: root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8
Output: 3
Explanation: The paths that sum to 8 are shown.


 Example 2:


Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
Output: 3



 Constraints:


 The number of nodes in the tree is in the range [0, 1000].
 -10‚Åπ <= Node.val <= 10‚Åπ
 -1000 <= targetSum <= 1000


 Related Topics Ê†ë Ê∑±Â∫¶‰ºòÂÖàÊêúÁ¥¢ ‰∫åÂèâÊ†ë üëç 1861 üëé 0

*/

//leetcode submit region begin(Prohibit modification and deletion)
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
// ËÆ∞ÂΩïÂâçÁºÄÂíå
// ÂÆö‰πâÔºö‰ªé‰∫åÂèâÊ†ëÁöÑÊ†πËäÇÁÇπÂºÄÂßãÔºåË∑ØÂæÑÂíå‰∏∫ pathSum ÁöÑË∑ØÂæÑÊúâ preSumCount[pathSum] ‰∏™
func pathSum(root *TreeNode, targetSum int) int {
	//ÂâçÁºÄÂíå
	preSumCount := make(map[int]int)
	//Ë∑ØÂæÑÂíå
	pathSum, res := 0, 0
	preSumCount[0] = 1
	traverseT(root, targetSum, &pathSum, &res, preSumCount)
	return res
}

func traverseT(root *TreeNode, targetSum int, pathSum, res *int, preSumCount map[int]int) {
	if root == nil {
		return
	}
	// ÂâçÂ∫èÈÅçÂéÜ‰ΩçÁΩÆ
	*pathSum += root.Val
	// ‰ªé‰∫åÂèâÊ†ëÁöÑÊ†πËäÇÁÇπÂºÄÂßãÔºåË∑ØÂæÑÂíå‰∏∫ pathSum - targetSum ÁöÑË∑ØÂæÑÊù°Êï∞
	// Â∞±ÊòØË∑ØÂæÑÂíå‰∏∫ targetSum ÁöÑË∑ØÂæÑÊù°Êï∞
	*res += preSumCount[*pathSum-targetSum]
	// ËÆ∞ÂΩï‰ªé‰∫åÂèâÊ†ëÁöÑÊ†πËäÇÁÇπÂºÄÂßãÔºåË∑ØÂæÑÂíå‰∏∫ pathSum ÁöÑË∑ØÂæÑÊù°Êï∞
	preSumCount[*pathSum]++
	traverseT(root.Left, targetSum, pathSum, res, preSumCount)
	traverseT(root.Right, targetSum, pathSum, res, preSumCount)
	// ÂêéÂ∫èÈÅçÂéÜ‰ΩçÁΩÆ
	preSumCount[*pathSum]--
	*pathSum -= root.Val
}

//leetcode submit region end(Prohibit modification and deletion)

func TestPathSumIii(t *testing.T) {

}
